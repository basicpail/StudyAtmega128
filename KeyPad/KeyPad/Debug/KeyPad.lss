
KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000262  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c91  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089a  00000000  00000000  00001005  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f8  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000465  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	64 d0       	rcall	.+200    	; 0x18c <main>
  c4:	cc c0       	rjmp	.+408    	; 0x25e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <KeyPad>:
	}
	if(KeyPad() == 9 )
	{
		PORTC = 0xF6; //1111 0110
		_delay_ms(100);
		PORTC = 0xFF;
  c8:	8e ef       	ldi	r24, 0xFE	; 254
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	86 e6       	ldi	r24, 0x66	; 102
  ce:	9e e0       	ldi	r25, 0x0E	; 14
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <KeyPad+0x8>
  d4:	00 00       	nop
  d6:	80 b3       	in	r24, 0x10	; 16
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	80 3e       	cpi	r24, 0xE0	; 224
  dc:	31 f4       	brne	.+12     	; 0xea <KeyPad+0x22>
  de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	80 3d       	cpi	r24, 0xD0	; 208
  f0:	b9 f1       	breq	.+110    	; 0x160 <KeyPad+0x98>
  f2:	80 b3       	in	r24, 0x10	; 16
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	80 3b       	cpi	r24, 0xB0	; 176
  f8:	a9 f1       	breq	.+106    	; 0x164 <KeyPad+0x9c>
  fa:	80 b3       	in	r24, 0x10	; 16
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	80 37       	cpi	r24, 0x70	; 112
 100:	99 f1       	breq	.+102    	; 0x168 <KeyPad+0xa0>
 102:	8d ef       	ldi	r24, 0xFD	; 253
 104:	82 bb       	out	0x12, r24	; 18
 106:	86 e6       	ldi	r24, 0x66	; 102
 108:	9e e0       	ldi	r25, 0x0E	; 14
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <KeyPad+0x42>
 10e:	00 00       	nop
 110:	80 b3       	in	r24, 0x10	; 16
 112:	80 7f       	andi	r24, 0xF0	; 240
 114:	80 3e       	cpi	r24, 0xE0	; 224
 116:	51 f1       	breq	.+84     	; 0x16c <KeyPad+0xa4>
 118:	80 b3       	in	r24, 0x10	; 16
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	80 3d       	cpi	r24, 0xD0	; 208
 11e:	41 f1       	breq	.+80     	; 0x170 <KeyPad+0xa8>
 120:	80 b3       	in	r24, 0x10	; 16
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	80 3b       	cpi	r24, 0xB0	; 176
 126:	31 f1       	breq	.+76     	; 0x174 <KeyPad+0xac>
 128:	80 b3       	in	r24, 0x10	; 16
 12a:	80 7f       	andi	r24, 0xF0	; 240
 12c:	80 37       	cpi	r24, 0x70	; 112
 12e:	21 f1       	breq	.+72     	; 0x178 <KeyPad+0xb0>
 130:	8b ef       	ldi	r24, 0xFB	; 251
 132:	82 bb       	out	0x12, r24	; 18
 134:	86 e6       	ldi	r24, 0x66	; 102
 136:	9e e0       	ldi	r25, 0x0E	; 14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <KeyPad+0x70>
 13c:	00 00       	nop
 13e:	80 b3       	in	r24, 0x10	; 16
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	80 3e       	cpi	r24, 0xE0	; 224
 144:	d9 f0       	breq	.+54     	; 0x17c <KeyPad+0xb4>
 146:	80 b3       	in	r24, 0x10	; 16
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	80 3d       	cpi	r24, 0xD0	; 208
 14c:	c9 f0       	breq	.+50     	; 0x180 <KeyPad+0xb8>
 14e:	80 b3       	in	r24, 0x10	; 16
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	80 3b       	cpi	r24, 0xB0	; 176
 154:	b9 f0       	breq	.+46     	; 0x184 <KeyPad+0xbc>
 156:	80 b3       	in	r24, 0x10	; 16
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	80 37       	cpi	r24, 0x70	; 112
 15c:	a9 f0       	breq	.+42     	; 0x188 <KeyPad+0xc0>
 15e:	08 95       	ret
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	08 95       	ret
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	08 95       	ret
 168:	8a e2       	ldi	r24, 0x2A	; 42
 16a:	08 95       	ret
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	08 95       	ret
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	08 95       	ret
 174:	88 e0       	ldi	r24, 0x08	; 8
 176:	08 95       	ret
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	08 95       	ret
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	08 95       	ret
 184:	89 e0       	ldi	r24, 0x09	; 9
 186:	08 95       	ret
 188:	83 e2       	ldi	r24, 0x23	; 35
 18a:	08 95       	ret

0000018c <main>:
	}
}

int main()
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	28 97       	sbiw	r28, 0x08	; 8
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0x0F;
 1a0:	9f e0       	ldi	r25, 0x0F	; 15
 1a2:	91 bb       	out	0x11, r25	; 17
	DDRC = 0x0F;
 1a4:	94 bb       	out	0x14, r25	; 20
	DDRF = 0xFF;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0x0F;
 1ac:	9a bb       	out	0x1a, r25	; 26
	
	PORTC = 0xFF;
 1ae:	85 bb       	out	0x15, r24	; 21
	PORTF = 0xFF;
 1b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
	unsigned char password[4]={1,1,1,1};
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	8a 83       	std	Y+2, r24	; 0x02
 1ba:	8b 83       	std	Y+3, r24	; 0x03
 1bc:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char Ispassword[4]={0};
 1be:	1d 82       	std	Y+5, r1	; 0x05
 1c0:	1e 82       	std	Y+6, r1	; 0x06
 1c2:	1f 82       	std	Y+7, r1	; 0x07
 1c4:	18 86       	std	Y+8, r1	; 0x08
	int i = 0;
	int y = 0 ;
 1c6:	e1 2c       	mov	r14, r1
 1c8:	f1 2c       	mov	r15, r1
	PORTC = 0xFF;
	PORTF = 0xFF;
	
	unsigned char password[4]={1,1,1,1};
	unsigned char Ispassword[4]={0};
	int i = 0;
 1ca:	00 e0       	ldi	r16, 0x00	; 0
 1cc:	10 e0       	ldi	r17, 0x00	; 0
			
			i++;
			PORTC = i;//확인
			_delay_ms(100);
		
			key=1;
 1ce:	cc 24       	eor	r12, r12
 1d0:	c3 94       	inc	r12
 1d2:	d1 2c       	mov	r13, r1
		}
		
		if(y==4)
		{
			PORTF = 0x00;
 1d4:	0f 2e       	mov	r0, r31
 1d6:	f2 e6       	ldi	r31, 0x62	; 98
 1d8:	af 2e       	mov	r10, r31
 1da:	b1 2c       	mov	r11, r1
 1dc:	f0 2d       	mov	r31, r0
	int i = 0;
	int y = 0 ;
	
	while(1)
	{
		Ispassword[i]=KeyPad(); // 입력된 키패드를 배열에 대입하고 배열순서 증가
 1de:	74 df       	rcall	.-280    	; 0xc8 <KeyPad>
 1e0:	e5 e0       	ldi	r30, 0x05	; 5
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e0 0f       	add	r30, r16
 1ea:	f1 1f       	adc	r31, r17
 1ec:	80 83       	st	Z, r24
		
		if(key==0) //다이얼을 누르면 if문으로 들어옴
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f6:	89 2b       	or	r24, r25
 1f8:	11 f5       	brne	.+68     	; 0x23e <main+0xb2>
		{
			
			if(i==3) // 지정된 암호길이
 1fa:	03 30       	cpi	r16, 0x03	; 3
 1fc:	11 05       	cpc	r17, r1
 1fe:	79 f4       	brne	.+30     	; 0x21e <main+0x92>
 200:	fe 01       	movw	r30, r28
 202:	31 96       	adiw	r30, 0x01	; 1
 204:	de 01       	movw	r26, r28
 206:	15 96       	adiw	r26, 0x05	; 5
 208:	9d 01       	movw	r18, r26
			{
				for (int x=0;x<4;x++)
				{
					if(password[x]==Ispassword[x]){y++;}
 20a:	91 91       	ld	r25, Z+
 20c:	8d 91       	ld	r24, X+
 20e:	98 13       	cpse	r25, r24
 210:	03 c0       	rjmp	.+6      	; 0x218 <main+0x8c>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	e8 1a       	sub	r14, r24
 216:	f8 0a       	sbc	r15, r24
		if(key==0) //다이얼을 누르면 if문으로 들어옴
		{
			
			if(i==3) // 지정된 암호길이
			{
				for (int x=0;x<4;x++)
 218:	e2 17       	cp	r30, r18
 21a:	f3 07       	cpc	r31, r19
 21c:	b1 f7       	brne	.-20     	; 0x20a <main+0x7e>
				{
					if(password[x]==Ispassword[x]){y++;}
				}
			}
			
			i++;
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTC = i;//확인
 222:	05 bb       	out	0x15, r16	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	ef e3       	ldi	r30, 0x3F	; 63
 228:	f2 e0       	ldi	r31, 0x02	; 2
 22a:	91 50       	subi	r25, 0x01	; 1
 22c:	e0 40       	sbci	r30, 0x00	; 0
 22e:	f0 40       	sbci	r31, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x9e>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0xa8>
 234:	00 00       	nop
			_delay_ms(100);
		
			key=1;
 236:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23a:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		if(y==4)
 23e:	24 e0       	ldi	r18, 0x04	; 4
 240:	e2 16       	cp	r14, r18
 242:	f1 04       	cpc	r15, r1
 244:	61 f6       	brne	.-104    	; 0x1de <main+0x52>
		{
			PORTF = 0x00;
 246:	f5 01       	movw	r30, r10
 248:	10 82       	st	Z, r1
 24a:	ff ef       	ldi	r31, 0xFF	; 255
 24c:	2f e7       	ldi	r18, 0x7F	; 127
 24e:	86 e1       	ldi	r24, 0x16	; 22
 250:	f1 50       	subi	r31, 0x01	; 1
 252:	20 40       	sbci	r18, 0x00	; 0
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0xc4>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0xce>
 25a:	00 00       	nop
 25c:	c0 cf       	rjmp	.-128    	; 0x1de <main+0x52>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
