
KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000344  000003d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800108  00800108  000003e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db9  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a2  00000000  00000000  00001245  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b4  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004af  00000000  00000000  00002569  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e9 d0       	rcall	.+466    	; 0x296 <main>
  c4:	3d c1       	rjmp	.+634    	; 0x340 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <KeyPad>:
	}
	if(KeyPad() == 9 )
	{
		PORTC = 0xF6; //1111 0110
		_delay_ms(100);
		PORTC = 0xFF;
  c8:	8e ef       	ldi	r24, 0xFE	; 254
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	2c ec       	ldi	r18, 0xCC	; 204
  ce:	8c ec       	ldi	r24, 0xCC	; 204
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <KeyPad+0xa>
  da:	00 c0       	rjmp	.+0      	; 0xdc <KeyPad+0x14>
  dc:	80 b3       	in	r24, 0x10	; 16
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	80 3e       	cpi	r24, 0xE0	; 224
  e2:	31 f4       	brne	.+12     	; 0xf0 <KeyPad+0x28>
  e4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
  e8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	08 95       	ret
  f0:	80 b3       	in	r24, 0x10	; 16
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	80 3d       	cpi	r24, 0xD0	; 208
  f6:	31 f4       	brne	.+12     	; 0x104 <KeyPad+0x3c>
  f8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
  fc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	08 95       	ret
 104:	80 b3       	in	r24, 0x10	; 16
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 3b       	cpi	r24, 0xB0	; 176
 10a:	31 f4       	brne	.+12     	; 0x118 <KeyPad+0x50>
 10c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 110:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	08 95       	ret
 118:	80 b3       	in	r24, 0x10	; 16
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	80 37       	cpi	r24, 0x70	; 112
 11e:	59 f4       	brne	.+22     	; 0x136 <KeyPad+0x6e>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <input_start>
 126:	91 11       	cpse	r25, r1
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <input_start>
 132:	8a e2       	ldi	r24, 0x2A	; 42
 134:	08 95       	ret
 136:	8d ef       	ldi	r24, 0xFD	; 253
 138:	82 bb       	out	0x12, r24	; 18
 13a:	2c ec       	ldi	r18, 0xCC	; 204
 13c:	8c ec       	ldi	r24, 0xCC	; 204
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <KeyPad+0x78>
 148:	00 c0       	rjmp	.+0      	; 0x14a <KeyPad+0x82>
 14a:	80 b3       	in	r24, 0x10	; 16
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	80 3e       	cpi	r24, 0xE0	; 224
 150:	31 f4       	brne	.+12     	; 0x15e <KeyPad+0x96>
 152:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 156:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	08 95       	ret
 15e:	80 b3       	in	r24, 0x10	; 16
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	80 3d       	cpi	r24, 0xD0	; 208
 164:	31 f4       	brne	.+12     	; 0x172 <KeyPad+0xaa>
 166:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 16a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	08 95       	ret
 172:	80 b3       	in	r24, 0x10	; 16
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	80 3b       	cpi	r24, 0xB0	; 176
 178:	31 f4       	brne	.+12     	; 0x186 <KeyPad+0xbe>
 17a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 17e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	08 95       	ret
 186:	80 b3       	in	r24, 0x10	; 16
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	80 37       	cpi	r24, 0x70	; 112
 18c:	31 f4       	brne	.+12     	; 0x19a <KeyPad+0xd2>
 18e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 192:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 19a:	8b ef       	ldi	r24, 0xFB	; 251
 19c:	82 bb       	out	0x12, r24	; 18
 19e:	2c ec       	ldi	r18, 0xCC	; 204
 1a0:	8c ec       	ldi	r24, 0xCC	; 204
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <KeyPad+0xdc>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <KeyPad+0xe6>
 1ae:	80 b3       	in	r24, 0x10	; 16
 1b0:	80 7f       	andi	r24, 0xF0	; 240
 1b2:	80 3e       	cpi	r24, 0xE0	; 224
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <KeyPad+0xfa>
 1b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 1ba:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	08 95       	ret
 1c2:	80 b3       	in	r24, 0x10	; 16
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	80 3d       	cpi	r24, 0xD0	; 208
 1c8:	31 f4       	brne	.+12     	; 0x1d6 <KeyPad+0x10e>
 1ca:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 1ce:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	08 95       	ret
 1d6:	80 b3       	in	r24, 0x10	; 16
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	80 3b       	cpi	r24, 0xB0	; 176
 1dc:	31 f4       	brne	.+12     	; 0x1ea <KeyPad+0x122>
 1de:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 1e2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 1e6:	89 e0       	ldi	r24, 0x09	; 9
 1e8:	08 95       	ret
 1ea:	80 b3       	in	r24, 0x10	; 16
 1ec:	80 7f       	andi	r24, 0xF0	; 240
 1ee:	80 37       	cpi	r24, 0x70	; 112
 1f0:	31 f4       	brne	.+12     	; 0x1fe <KeyPad+0x136>
 1f2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <key+0x1>
 1f6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <key>
 1fa:	83 e2       	ldi	r24, 0x23	; 35
 1fc:	08 95       	ret
 1fe:	08 95       	ret

00000200 <M_start>:
		}
	}
}
void M_start(void)
{
	PORTF = 0x00;
 200:	e2 e6       	ldi	r30, 0x62	; 98
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	10 82       	st	Z, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	9c e2       	ldi	r25, 0x2C	; 44
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <M_start+0xc>
 214:	00 c0       	rjmp	.+0      	; 0x216 <M_start+0x16>
 216:	00 00       	nop
	_delay_ms(2000);
	PORTF = 0xFF;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	80 83       	st	Z, r24
	m_cnt=0;
 21c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 220:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
	arr_cnt=0;
 224:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <arr_cnt+0x1>
 228:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <arr_cnt>
 22c:	08 95       	ret

0000022e <ComparePassword>:
}
void ComparePassword(void)
{
	if(arr_cnt==3) // 지정된 암호길이
 22e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <arr_cnt>
 232:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <arr_cnt+0x1>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	91 05       	cpc	r25, r1
 23a:	b9 f4       	brne	.+46     	; 0x26a <ComparePassword+0x3c>
 23c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <__data_end>
 240:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <__data_end+0x1>
 244:	e2 e0       	ldi	r30, 0x02	; 2
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	ac e0       	ldi	r26, 0x0C	; 12
 24a:	b1 e0       	ldi	r27, 0x01	; 1
 24c:	46 e0       	ldi	r20, 0x06	; 6
 24e:	51 e0       	ldi	r21, 0x01	; 1
	{
		for (int x=0;x<4;x++)
		{
			if(password[x]==Ispassword[x]){m_cnt++;}
 250:	31 91       	ld	r19, Z+
 252:	2d 91       	ld	r18, X+
 254:	32 13       	cpse	r19, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <ComparePassword+0x2e>
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
}
void ComparePassword(void)
{
	if(arr_cnt==3) // 지정된 암호길이
	{
		for (int x=0;x<4;x++)
 25c:	e4 17       	cp	r30, r20
 25e:	f5 07       	cpc	r31, r21
 260:	b9 f7       	brne	.-18     	; 0x250 <ComparePassword+0x22>
 262:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <__data_end+0x1>
 266:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
		{
			if(password[x]==Ispassword[x]){m_cnt++;}
		}
	}
	arr_cnt++;
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <arr_cnt+0x1>
 270:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <arr_cnt>
	PORTC = arr_cnt;//확인
 274:	85 bb       	out	0x15, r24	; 21
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	8f e3       	ldi	r24, 0x3F	; 63
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <ComparePassword+0x4e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <ComparePassword+0x58>
 286:	00 00       	nop
	_delay_ms(100);
	
	key=1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <key+0x1>
 290:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <key>
 294:	08 95       	ret

00000296 <main>:



int main()
{
	DDRD = 0x0F;
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F;
 29a:	84 bb       	out	0x14, r24	; 20
	DDRF = 0xFF;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	PORTC = 0xFF;
 2a2:	85 bb       	out	0x15, r24	; 21
	PORTF = 0xFF;
 2a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			PORTC=0x00;
			_delay_ms(100);
		}
		if(old_input_start==1)
		{
			PORTC=0xFF;
 2a8:	1f ef       	ldi	r17, 0xFF	; 255
	
	PORTC = 0xFF;
	PORTF = 0xFF;
	while(1)
	{
		Ispassword[arr_cnt]=KeyPad(); // 입력된 키패드를 배열에 대입하고 배열순서 증가
 2aa:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <arr_cnt>
 2ae:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <arr_cnt+0x1>
 2b2:	0a df       	rcall	.-492    	; 0xc8 <KeyPad>
 2b4:	c4 5f       	subi	r28, 0xF4	; 244
 2b6:	de 4f       	sbci	r29, 0xFE	; 254
 2b8:	88 83       	st	Y, r24
		
		if(key==0 && old_input_start==0) //다이얼을 누르면 if 안으로 들어옴
 2ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <key>
 2be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <key+0x1>
 2c2:	89 2b       	or	r24, r25
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <main+0x3a>
 2c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	81 11       	cpse	r24, r1
		{
			ComparePassword();
 2cc:	29 c0       	rjmp	.+82     	; 0x320 <main+0x8a>
 2ce:	af df       	rcall	.-162    	; 0x22e <ComparePassword>
		}
		if(m_cnt==4 && old_input_start==1)
 2d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 2d8:	04 97       	sbiw	r24, 0x04	; 4
 2da:	29 f4       	brne	.+10     	; 0x2e6 <main+0x50>
 2dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e0:	81 30       	cpi	r24, 0x01	; 1
		{
			M_start();
 2e2:	29 f5       	brne	.+74     	; 0x32e <main+0x98>
 2e4:	8d df       	rcall	.-230    	; 0x200 <M_start>
		}
		if(old_input_start==0)
 2e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ea:	81 11       	cpse	r24, r1
 2ec:	0a c0       	rjmp	.+20     	; 0x302 <main+0x6c>
		{
			PORTC=0x00;
 2ee:	15 ba       	out	0x15, r1	; 21
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	8f e3       	ldi	r24, 0x3F	; 63
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x60>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x6a>
 300:	00 00       	nop
			_delay_ms(100);
		}
		if(old_input_start==1)
 302:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	81 f6       	brne	.-96     	; 0x2aa <main+0x14>
		{
			PORTC=0xFF;
 30a:	15 bb       	out	0x15, r17	; 21
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	92 e0       	ldi	r25, 0x02	; 2
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x7c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x86>
 31c:	00 00       	nop
 31e:	c5 cf       	rjmp	.-118    	; 0x2aa <main+0x14>
		
		if(key==0 && old_input_start==0) //다이얼을 누르면 if 안으로 들어옴
		{
			ComparePassword();
		}
		if(m_cnt==4 && old_input_start==1)
 320:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 324:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 328:	04 97       	sbiw	r24, 0x04	; 4
 32a:	59 f7       	brne	.-42     	; 0x302 <main+0x6c>
 32c:	03 c0       	rjmp	.+6      	; 0x334 <main+0x9e>
		{
			M_start();
		}
		if(old_input_start==0)
 32e:	88 23       	and	r24, r24
 330:	f1 f2       	breq	.-68     	; 0x2ee <main+0x58>
 332:	bb cf       	rjmp	.-138    	; 0x2aa <main+0x14>
		
		if(key==0 && old_input_start==0) //다이얼을 누르면 if 안으로 들어옴
		{
			ComparePassword();
		}
		if(m_cnt==4 && old_input_start==1)
 334:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	09 f0       	breq	.+2      	; 0x33e <main+0xa8>
 33c:	b6 cf       	rjmp	.-148    	; 0x2aa <main+0x14>
 33e:	d2 cf       	rjmp	.-92     	; 0x2e4 <main+0x4e>

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
