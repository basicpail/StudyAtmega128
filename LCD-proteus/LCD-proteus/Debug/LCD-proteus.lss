
LCD-proteus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000370  000003e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000370  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e5  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a39  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ee  00000000  00000000  0000200e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000026fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b9  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000678  00000000  00000000  00002cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003331  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	09 d1       	rcall	.+530    	; 0x2c6 <main>
  b4:	5b c1       	rjmp	.+694    	; 0x36c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LcdCmd_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	d8 98       	cbi	0x1b, 0	; 27
  ba:	d9 98       	cbi	0x1b, 1	; 27
  bc:	98 2f       	mov	r25, r24
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	94 60       	ori	r25, 0x04	; 4
  c2:	9b bb       	out	0x1b, r25	; 27
  c4:	2b e7       	ldi	r18, 0x7B	; 123
  c6:	2a 95       	dec	r18
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LcdCmd_4bit+0xe>
  ca:	da 98       	cbi	0x1b, 2	; 27
  cc:	d8 98       	cbi	0x1b, 0	; 27
  ce:	d9 98       	cbi	0x1b, 1	; 27
  d0:	20 e1       	ldi	r18, 0x10	; 16
  d2:	82 9f       	mul	r24, r18
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	8b e7       	ldi	r24, 0x7B	; 123
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <LcdCmd_4bit+0x26>
  e2:	da 98       	cbi	0x1b, 2	; 27
  e4:	08 95       	ret

000000e6 <LcdData_4bit>:
  e6:	d9 98       	cbi	0x1b, 1	; 27
  e8:	98 2f       	mov	r25, r24
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	95 60       	ori	r25, 0x05	; 5
  ee:	9b bb       	out	0x1b, r25	; 27
  f0:	2b e7       	ldi	r18, 0x7B	; 123
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LcdData_4bit+0xc>
  f6:	da 98       	cbi	0x1b, 2	; 27
  f8:	d9 98       	cbi	0x1b, 1	; 27
  fa:	20 e1       	ldi	r18, 0x10	; 16
  fc:	82 9f       	mul	r24, r18
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	85 60       	ori	r24, 0x05	; 5
 104:	8b bb       	out	0x1b, r24	; 27
 106:	8b e7       	ldi	r24, 0x7B	; 123
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <LcdData_4bit+0x22>
 10c:	da 98       	cbi	0x1b, 2	; 27
 10e:	08 95       	ret

00000110 <Lcd_CHAR>:
 110:	ea df       	rcall	.-44     	; 0xe6 <LcdData_4bit>
 112:	83 e3       	ldi	r24, 0x33	; 51
 114:	97 e0       	ldi	r25, 0x07	; 7
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <Lcd_CHAR+0x6>
 11a:	08 95       	ret

0000011c <Lcd_STR>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	88 81       	ld	r24, Y
 124:	88 23       	and	r24, r24
 126:	29 f0       	breq	.+10     	; 0x132 <Lcd_STR+0x16>
 128:	21 96       	adiw	r28, 0x01	; 1
 12a:	f2 df       	rcall	.-28     	; 0x110 <Lcd_CHAR>
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fc cf       	rjmp	.-8      	; 0x12a <Lcd_STR+0xe>
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <Lcd_Pos>:
 138:	90 e4       	ldi	r25, 0x40	; 64
 13a:	89 9f       	mul	r24, r25
 13c:	60 0d       	add	r22, r0
 13e:	11 24       	eor	r1, r1
 140:	86 2f       	mov	r24, r22
 142:	80 68       	ori	r24, 0x80	; 128
 144:	b9 cf       	rjmp	.-142    	; 0xb8 <LcdCmd_4bit>
 146:	08 95       	ret

00000148 <Lcd_Clear>:
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	b6 df       	rcall	.-148    	; 0xb8 <LcdCmd_4bit>
 14c:	86 e6       	ldi	r24, 0x66	; 102
 14e:	9e e0       	ldi	r25, 0x0E	; 14
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <Lcd_Clear+0x8>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <LcdInit_4bit>:
	}
}

void LcdInit_4bit(void)
{
	LcdCmd_4bit(0x02);	//cursor Home
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	ae df       	rcall	.-164    	; 0xb8 <LcdCmd_4bit>
 15c:	86 e6       	ldi	r24, 0x66	; 102
 15e:	9e e0       	ldi	r25, 0x0E	; 14
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LcdInit_4bit+0x8>
 164:	00 00       	nop
	_delay_ms(2);		//명령어를 IR에 쓰고나면 37us 또는 1.52ms을 기다림.
	LcdCmd_4bit(0x28);	//기능 재설정
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	a7 df       	rcall	.-178    	; 0xb8 <LcdCmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	9b e5       	ldi	r25, 0x5B	; 91
 16c:	9a 95       	dec	r25
	_delay_us(37);
	LcdCmd_4bit(0x0c);	//LCD ON, 커서 깜박임 없음
 16e:	f1 f7       	brne	.-4      	; 0x16c <LcdInit_4bit+0x14>
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	a2 df       	rcall	.-188    	; 0xb8 <LcdCmd_4bit>
 174:	8b e5       	ldi	r24, 0x5B	; 91
 176:	8a 95       	dec	r24
	_delay_us(37);
	LcdCmd_4bit(0x06);	//엔트리:우로 이동
 178:	f1 f7       	brne	.-4      	; 0x176 <LcdInit_4bit+0x1e>
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	9d df       	rcall	.-198    	; 0xb8 <LcdCmd_4bit>
 17e:	9b e5       	ldi	r25, 0x5B	; 91
 180:	9a 95       	dec	r25
	_delay_us(37);
	Lcd_Clear();
 182:	f1 f7       	brne	.-4      	; 0x180 <LcdInit_4bit+0x28>
 184:	e1 cf       	rjmp	.-62     	; 0x148 <Lcd_Clear>
 186:	08 95       	ret

00000188 <KeyPad>:
void putch(unsigned char data)
{
	while((UCSR0A & 0x20) == 0);
	
	UDR0 = data;
	UCSR0A |= 0x20;
 188:	8e ef       	ldi	r24, 0xFE	; 254
 18a:	82 bb       	out	0x12, r24	; 18
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	8f e7       	ldi	r24, 0x7F	; 127
 190:	94 e0       	ldi	r25, 0x04	; 4
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <KeyPad+0xa>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <KeyPad+0x14>
 19c:	00 00       	nop
 19e:	80 b3       	in	r24, 0x10	; 16
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	80 3e       	cpi	r24, 0xE0	; 224
 1a4:	31 f4       	brne	.+12     	; 0x1b2 <KeyPad+0x2a>
 1a6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	81 e3       	ldi	r24, 0x31	; 49
 1b0:	08 95       	ret
 1b2:	80 b3       	in	r24, 0x10	; 16
 1b4:	80 7f       	andi	r24, 0xF0	; 240
 1b6:	80 3d       	cpi	r24, 0xD0	; 208
 1b8:	31 f4       	brne	.+12     	; 0x1c6 <KeyPad+0x3e>
 1ba:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	84 e3       	ldi	r24, 0x34	; 52
 1c4:	08 95       	ret
 1c6:	80 b3       	in	r24, 0x10	; 16
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	80 3b       	cpi	r24, 0xB0	; 176
 1cc:	31 f4       	brne	.+12     	; 0x1da <KeyPad+0x52>
 1ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d6:	87 e3       	ldi	r24, 0x37	; 55
 1d8:	08 95       	ret
 1da:	80 b3       	in	r24, 0x10	; 16
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	80 37       	cpi	r24, 0x70	; 112
 1e0:	31 f4       	brne	.+12     	; 0x1ee <KeyPad+0x66>
 1e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ea:	8a e2       	ldi	r24, 0x2A	; 42
 1ec:	08 95       	ret
 1ee:	8d ef       	ldi	r24, 0xFD	; 253
 1f0:	82 bb       	out	0x12, r24	; 18
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	8f e7       	ldi	r24, 0x7F	; 127
 1f6:	94 e0       	ldi	r25, 0x04	; 4
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <KeyPad+0x70>
 200:	00 c0       	rjmp	.+0      	; 0x202 <KeyPad+0x7a>
 202:	00 00       	nop
 204:	80 b3       	in	r24, 0x10	; 16
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	80 3e       	cpi	r24, 0xE0	; 224
 20a:	31 f4       	brne	.+12     	; 0x218 <KeyPad+0x90>
 20c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	08 95       	ret
 218:	80 b3       	in	r24, 0x10	; 16
 21a:	80 7f       	andi	r24, 0xF0	; 240
 21c:	80 3d       	cpi	r24, 0xD0	; 208
 21e:	31 f4       	brne	.+12     	; 0x22c <KeyPad+0xa4>
 220:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 224:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	08 95       	ret
 22c:	80 b3       	in	r24, 0x10	; 16
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	80 3b       	cpi	r24, 0xB0	; 176
 232:	31 f4       	brne	.+12     	; 0x240 <KeyPad+0xb8>
 234:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	08 95       	ret
 240:	80 b3       	in	r24, 0x10	; 16
 242:	80 7f       	andi	r24, 0xF0	; 240
 244:	80 37       	cpi	r24, 0x70	; 112
 246:	31 f4       	brne	.+12     	; 0x254 <KeyPad+0xcc>
 248:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	8b ef       	ldi	r24, 0xFB	; 251
 256:	82 bb       	out	0x12, r24	; 18
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	8f e7       	ldi	r24, 0x7F	; 127
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <KeyPad+0xd6>
 266:	00 c0       	rjmp	.+0      	; 0x268 <KeyPad+0xe0>
 268:	00 00       	nop
 26a:	80 b3       	in	r24, 0x10	; 16
 26c:	80 7f       	andi	r24, 0xF0	; 240
 26e:	80 3e       	cpi	r24, 0xE0	; 224
 270:	31 f4       	brne	.+12     	; 0x27e <KeyPad+0xf6>
 272:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 276:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	08 95       	ret
 27e:	80 b3       	in	r24, 0x10	; 16
 280:	80 7f       	andi	r24, 0xF0	; 240
 282:	80 3d       	cpi	r24, 0xD0	; 208
 284:	31 f4       	brne	.+12     	; 0x292 <KeyPad+0x10a>
 286:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	08 95       	ret
 292:	80 b3       	in	r24, 0x10	; 16
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	80 3b       	cpi	r24, 0xB0	; 176
 298:	31 f4       	brne	.+12     	; 0x2a6 <KeyPad+0x11e>
 29a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a2:	89 e0       	ldi	r24, 0x09	; 9
 2a4:	08 95       	ret
 2a6:	80 b3       	in	r24, 0x10	; 16
 2a8:	80 7f       	andi	r24, 0xF0	; 240
 2aa:	80 37       	cpi	r24, 0x70	; 112
 2ac:	31 f4       	brne	.+12     	; 0x2ba <KeyPad+0x132>
 2ae:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b6:	83 e2       	ldi	r24, 0x23	; 35
 2b8:	08 95       	ret
 2ba:	08 95       	ret

000002bc <getch>:
}

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80)==0);
 2bc:	5f 9b       	sbis	0x0b, 7	; 11
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <getch>
	data = UDR0;
 2c0:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
 2c2:	5f 9a       	sbi	0x0b, 7	; 11
	return data;
}
 2c4:	08 95       	ret

000002c6 <main>:

int main(void)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	2b 97       	sbiw	r28, 0x0b	; 11
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0x0F;
 2da:	8f e0       	ldi	r24, 0x0F	; 15
 2dc:	81 bb       	out	0x11, r24	; 17
	Byte str[] ="Iot BigData";
	Byte str1[] ="Hello!!!!!";
 2de:	8b e0       	ldi	r24, 0x0B	; 11
 2e0:	e2 e0       	ldi	r30, 0x02	; 2
 2e2:	f1 e0       	ldi	r31, 0x01	; 1
 2e4:	de 01       	movw	r26, r28
 2e6:	11 96       	adiw	r26, 0x01	; 1
 2e8:	01 90       	ld	r0, Z+
 2ea:	0d 92       	st	X+, r0
 2ec:	8a 95       	dec	r24
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x22>
	Byte str2[1]=" ";
	DDRA = 0xFF;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	8a bb       	out	0x1a, r24	; 26
	LcdInit_4bit();
 2f4:	31 df       	rcall	.-414    	; 0x158 <LcdInit_4bit>
	
	Byte number[16]="";
	int arr_cnt = 0;

	
	DDRE = 0xfe;
 2f6:	8e ef       	ldi	r24, 0xFE	; 254
 2f8:	82 b9       	out	0x02, r24	; 2
	
	UCSR0A = 0x00;
 2fa:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;
 2fc:	88 e1       	ldi	r24, 0x18	; 24
 2fe:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	UBRR0H = 0x00;
 306:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	89 b9       	out	0x09, r24	; 9
		_delay_ms(10);
		if(key==0)
		{
			_delay_ms(50);
			arr_cnt++;
			key = 1;
 30e:	01 e0       	ldi	r16, 0x01	; 1
	UBRR0L = 0x03;
	
	Byte i;
    while (1) 
    {
		number[arr_cnt]=(Byte)KeyPad();
 310:	10 e0       	ldi	r17, 0x00	; 0
 312:	3a df       	rcall	.-396    	; 0x188 <KeyPad>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	97 e4       	ldi	r25, 0x47	; 71
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x52>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x58>
 31e:	00 00       	nop
		_delay_ms(10);
		if(key==0)
 320:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 324:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 328:	89 2b       	or	r24, r25
 32a:	69 f4       	brne	.+26     	; 0x346 <main+0x80>
 32c:	9f ef       	ldi	r25, 0xFF	; 255
 32e:	2f e1       	ldi	r18, 0x1F	; 31
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	91 50       	subi	r25, 0x01	; 1
 334:	20 40       	sbci	r18, 0x00	; 0
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x6c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x76>
 33c:	00 00       	nop
		{
			_delay_ms(50);
			arr_cnt++;
			key = 1;
 33e:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 342:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		Lcd_Pos(0,0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	f6 de       	rcall	.-532    	; 0x138 <Lcd_Pos>
		Lcd_STR(str1);
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	e5 de       	rcall	.-566    	; 0x11c <Lcd_STR>
		
		Lcd_Pos(1,0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	f0 de       	rcall	.-544    	; 0x138 <Lcd_Pos>
		i=(Byte)getch();
 358:	b1 df       	rcall	.-158    	; 0x2bc <getch>
 35a:	90 e0       	ldi	r25, 0x00	; 0
		Lcd_STR(i);
 35c:	df de       	rcall	.-578    	; 0x11c <Lcd_STR>
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	97 e4       	ldi	r25, 0x47	; 71
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <main+0x9c>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0xa2>
 368:	00 00       	nop
 36a:	d3 cf       	rjmp	.-90     	; 0x312 <main+0x4c>

0000036c <_exit>:
 36c:	f8 94       	cli

0000036e <__stop_program>:
 36e:	ff cf       	rjmp	.-2      	; 0x36e <__stop_program>
