
AD_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ebf  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b3  00000000  00000000  000011c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053a  00000000  00000000  00001b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000504  00000000  00000000  00002605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002b09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	6a d0       	rcall	.+212    	; 0x16e <main>
  9a:	94 c0       	rjmp	.+296    	; 0x1c4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <LcdCmd_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	d8 98       	cbi	0x1b, 0	; 27
  a0:	d9 98       	cbi	0x1b, 1	; 27
  a2:	98 2f       	mov	r25, r24
  a4:	90 7f       	andi	r25, 0xF0	; 240
  a6:	94 60       	ori	r25, 0x04	; 4
  a8:	9b bb       	out	0x1b, r25	; 27
  aa:	2b e7       	ldi	r18, 0x7B	; 123
  ac:	2a 95       	dec	r18
  ae:	f1 f7       	brne	.-4      	; 0xac <LcdCmd_4bit+0xe>
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	d8 98       	cbi	0x1b, 0	; 27
  b4:	d9 98       	cbi	0x1b, 1	; 27
  b6:	20 e1       	ldi	r18, 0x10	; 16
  b8:	82 9f       	mul	r24, r18
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	8b e7       	ldi	r24, 0x7B	; 123
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LcdCmd_4bit+0x26>
  c8:	da 98       	cbi	0x1b, 2	; 27
  ca:	08 95       	ret

000000cc <LcdData_4bit>:
  cc:	d9 98       	cbi	0x1b, 1	; 27
  ce:	98 2f       	mov	r25, r24
  d0:	90 7f       	andi	r25, 0xF0	; 240
  d2:	95 60       	ori	r25, 0x05	; 5
  d4:	9b bb       	out	0x1b, r25	; 27
  d6:	2b e7       	ldi	r18, 0x7B	; 123
  d8:	2a 95       	dec	r18
  da:	f1 f7       	brne	.-4      	; 0xd8 <LcdData_4bit+0xc>
  dc:	da 98       	cbi	0x1b, 2	; 27
  de:	d9 98       	cbi	0x1b, 1	; 27
  e0:	20 e1       	ldi	r18, 0x10	; 16
  e2:	82 9f       	mul	r24, r18
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	85 60       	ori	r24, 0x05	; 5
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	8b e7       	ldi	r24, 0x7B	; 123
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <LcdData_4bit+0x22>
  f2:	da 98       	cbi	0x1b, 2	; 27
  f4:	08 95       	ret

000000f6 <Lcd_CHAR>:
  f6:	ea df       	rcall	.-44     	; 0xcc <LcdData_4bit>
  f8:	83 e3       	ldi	r24, 0x33	; 51
  fa:	97 e0       	ldi	r25, 0x07	; 7
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <Lcd_CHAR+0x6>
 100:	08 95       	ret

00000102 <Lcd_STR>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	29 f0       	breq	.+10     	; 0x118 <Lcd_STR+0x16>
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	f2 df       	rcall	.-28     	; 0xf6 <Lcd_CHAR>
 112:	89 91       	ld	r24, Y+
 114:	81 11       	cpse	r24, r1
 116:	fc cf       	rjmp	.-8      	; 0x110 <Lcd_STR+0xe>
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <Lcd_Pos>:
 11e:	90 e4       	ldi	r25, 0x40	; 64
 120:	89 9f       	mul	r24, r25
 122:	60 0d       	add	r22, r0
 124:	11 24       	eor	r1, r1
 126:	86 2f       	mov	r24, r22
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	b9 cf       	rjmp	.-142    	; 0x9e <LcdCmd_4bit>
 12c:	08 95       	ret

0000012e <Lcd_Clear>:
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	b6 df       	rcall	.-148    	; 0x9e <LcdCmd_4bit>
 132:	86 e6       	ldi	r24, 0x66	; 102
 134:	9e e0       	ldi	r25, 0x0E	; 14
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <Lcd_Clear+0x8>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <LcdInit_4bit>:
	}
}

void LcdInit_4bit(void)
{
	LcdCmd_4bit(0x02);	//cursor Home
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	ae df       	rcall	.-164    	; 0x9e <LcdCmd_4bit>
 142:	86 e6       	ldi	r24, 0x66	; 102
 144:	9e e0       	ldi	r25, 0x0E	; 14
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LcdInit_4bit+0x8>
 14a:	00 00       	nop
	_delay_ms(2);		//명령어를 IR에 쓰고나면 37us 또는 1.52ms을 기다림.
	LcdCmd_4bit(0x28);	//기능 재설정
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	a7 df       	rcall	.-178    	; 0x9e <LcdCmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	9b e5       	ldi	r25, 0x5B	; 91
 152:	9a 95       	dec	r25
	_delay_us(37);
	LcdCmd_4bit(0x0c);	//LCD ON, 커서 깜박임 없음
 154:	f1 f7       	brne	.-4      	; 0x152 <LcdInit_4bit+0x14>
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	a2 df       	rcall	.-188    	; 0x9e <LcdCmd_4bit>
 15a:	8b e5       	ldi	r24, 0x5B	; 91
 15c:	8a 95       	dec	r24
	_delay_us(37);
	LcdCmd_4bit(0x06);	//엔트리:우로 이동
 15e:	f1 f7       	brne	.-4      	; 0x15c <LcdInit_4bit+0x1e>
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	9d df       	rcall	.-198    	; 0x9e <LcdCmd_4bit>
 164:	9b e5       	ldi	r25, 0x5B	; 91
 166:	9a 95       	dec	r25
	_delay_us(37);
	Lcd_Clear();
 168:	f1 f7       	brne	.-4      	; 0x166 <LcdInit_4bit+0x28>
 16a:	e1 cf       	rjmp	.-62     	; 0x12e <Lcd_Clear>
 16c:	08 95       	ret

0000016e <main>:
#include <util/delay.h>
#include "lcd.h"


int main(void)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <main+0x6>
 174:	1f 92       	push	r1
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	unsigned int addata = 0;
	
	DDRF = 0x02;
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF = 0x02;
 180:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
	PORTA = 0xff;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	8b bb       	out	0x1b, r24	; 27
		
	LcdInit_4bit();
 188:	da df       	rcall	.-76     	; 0x13e <LcdInit_4bit>
	
	ADMUX = 0x00;
 18a:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x86;
 18c:	86 e8       	ldi	r24, 0x86	; 134
 18e:	86 b9       	out	0x06, r24	; 6
	
	Byte str[] = "hi";
 190:	88 e6       	ldi	r24, 0x68	; 104
 192:	99 e6       	ldi	r25, 0x69	; 105
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	89 83       	std	Y+1, r24	; 0x01
 198:	1b 82       	std	Y+3, r1	; 0x03

    while (1) 
    {
		ADCSRA |= 0x40;
 19a:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA & 0x10) == 0x00);
 19c:	34 9b       	sbis	0x06, 4	; 6
 19e:	fe cf       	rjmp	.-4      	; 0x19c <main+0x2e>
		addata = ADC;
 1a0:	84 b1       	in	r24, 0x04	; 4
 1a2:	95 b1       	in	r25, 0x05	; 5
		Lcd_Pos(0,0);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	ba df       	rcall	.-140    	; 0x11e <Lcd_Pos>
		//Lcd_STR((addata/100)%10 + '0');
		//Lcd_STR((addata/10)%10 + '0');
		//Lcd_STR((addata)%10 + '0');
		//Lcd_STR(addata);
		
		Lcd_STR(str);
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	a9 df       	rcall	.-174    	; 0x102 <Lcd_STR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9b e0       	ldi	r25, 0x0B	; 11
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x48>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x52>
 1c0:	00 00       	nop
 1c2:	eb cf       	rjmp	.-42     	; 0x19a <main+0x2c>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
