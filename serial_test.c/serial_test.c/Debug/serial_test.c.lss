
serial_test.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800114  00800114  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000957  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a5  00000000  00000000  00000d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000067  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001d6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	31 d0       	rcall	.+98     	; 0x126 <main>
  c4:	e0 c0       	rjmp	.+448    	; 0x286 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <putch>:

unsigned char scale = 0;
	
void putch(unsigned char data)
{
	while((UCSR0A & 0x20) == 0);
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <putch>
	
	UDR0 = data;
  cc:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= 0x20;
  ce:	5d 9a       	sbi	0x0b, 5	; 11
  d0:	08 95       	ret

000000d2 <getch>:
}

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80)==0);
  d2:	5f 9b       	sbis	0x0b, 7	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <getch>
	data = UDR0;
  d6:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  d8:	5f 9a       	sbi	0x0b, 7	; 11
	return data;
}
  da:	08 95       	ret

000000dc <buz>:
		scale=getchar();
		buz(scale);
	}
}
void buz(unsigned char x)
{
  dc:	cf 93       	push	r28
	unsigned char q = x-48;
  de:	c0 ed       	ldi	r28, 0xD0	; 208
  e0:	c8 0f       	add	r28, r24
	putch(q);
  e2:	8c 2f       	mov	r24, r28
  e4:	f1 df       	rcall	.-30     	; 0xc8 <putch>
	ICR1 = 7273800/Do[q];
  e6:	ec 2f       	mov	r30, r28
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e0 50       	subi	r30, 0x00	; 0
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	20 81       	ld	r18, Z
  f4:	31 81       	ldd	r19, Z+1	; 0x01
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	68 e4       	ldi	r22, 0x48	; 72
  fc:	7d ef       	ldi	r23, 0xFD	; 253
  fe:	8e e6       	ldi	r24, 0x6E	; 110
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	31 d0       	rcall	.+98     	; 0x166 <__divmodsi4>
 104:	37 bd       	out	0x27, r19	; 39
 106:	26 bd       	out	0x26, r18	; 38
	OCR1C = ICR1/5;
 108:	26 b5       	in	r18, 0x26	; 38
 10a:	37 b5       	in	r19, 0x27	; 39
 10c:	ad ec       	ldi	r26, 0xCD	; 205
 10e:	bc ec       	ldi	r27, 0xCC	; 204
 110:	46 d0       	rcall	.+140    	; 0x19e <__umulhisi3>
 112:	96 95       	lsr	r25
 114:	87 95       	ror	r24
 116:	96 95       	lsr	r25
 118:	87 95       	ror	r24
 11a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
}
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <main>:

int main(void)
{
	unsigned char piano=0;
		
	DDRB = 0x80;
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	87 bb       	out	0x17, r24	; 23
		
	TCCR1A |= 0x0A;
 12a:	8f b5       	in	r24, 0x2f	; 47
 12c:	8a 60       	ori	r24, 0x0A	; 10
 12e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 0x19;
 130:	8e b5       	in	r24, 0x2e	; 46
 132:	89 61       	ori	r24, 0x19	; 25
 134:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;
 136:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0x0000;
 13a:	1d bc       	out	0x2d, r1	; 45
 13c:	1c bc       	out	0x2c, r1	; 44
	DDRE = 0xfe;
 13e:	8e ef       	ldi	r24, 0xFE	; 254
 140:	82 b9       	out	0x02, r24	; 2
	
	UCSR0A = 0x00;
 142:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;
 144:	88 e1       	ldi	r24, 0x18	; 24
 146:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	UBRR0H = 0x00;
 14e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	89 b9       	out	0x09, r24	; 9

	while(1)
	{
		putch(getch());
 156:	bd df       	rcall	.-134    	; 0xd2 <getch>
 158:	b7 df       	rcall	.-146    	; 0xc8 <putch>
		scale=getchar();
 15a:	52 d0       	rcall	.+164    	; 0x200 <getchar>
 15c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		buz(scale);
 160:	99 27       	eor	r25, r25
 162:	bc df       	rcall	.-136    	; 0xdc <buz>
 164:	f8 cf       	rjmp	.-16     	; 0x156 <main+0x30>

00000166 <__divmodsi4>:
 166:	05 2e       	mov	r0, r21
 168:	97 fb       	bst	r25, 7
 16a:	16 f4       	brtc	.+4      	; 0x170 <__divmodsi4+0xa>
 16c:	00 94       	com	r0
 16e:	0f d0       	rcall	.+30     	; 0x18e <__negsi2>
 170:	57 fd       	sbrc	r21, 7
 172:	05 d0       	rcall	.+10     	; 0x17e <__divmodsi4_neg2>
 174:	23 d0       	rcall	.+70     	; 0x1bc <__udivmodsi4>
 176:	07 fc       	sbrc	r0, 7
 178:	02 d0       	rcall	.+4      	; 0x17e <__divmodsi4_neg2>
 17a:	46 f4       	brtc	.+16     	; 0x18c <__divmodsi4_exit>
 17c:	08 c0       	rjmp	.+16     	; 0x18e <__negsi2>

0000017e <__divmodsi4_neg2>:
 17e:	50 95       	com	r21
 180:	40 95       	com	r20
 182:	30 95       	com	r19
 184:	21 95       	neg	r18
 186:	3f 4f       	sbci	r19, 0xFF	; 255
 188:	4f 4f       	sbci	r20, 0xFF	; 255
 18a:	5f 4f       	sbci	r21, 0xFF	; 255

0000018c <__divmodsi4_exit>:
 18c:	08 95       	ret

0000018e <__negsi2>:
 18e:	90 95       	com	r25
 190:	80 95       	com	r24
 192:	70 95       	com	r23
 194:	61 95       	neg	r22
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	8f 4f       	sbci	r24, 0xFF	; 255
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	08 95       	ret

0000019e <__umulhisi3>:
 19e:	a2 9f       	mul	r26, r18
 1a0:	b0 01       	movw	r22, r0
 1a2:	b3 9f       	mul	r27, r19
 1a4:	c0 01       	movw	r24, r0
 1a6:	a3 9f       	mul	r26, r19
 1a8:	70 0d       	add	r23, r0
 1aa:	81 1d       	adc	r24, r1
 1ac:	11 24       	eor	r1, r1
 1ae:	91 1d       	adc	r25, r1
 1b0:	b2 9f       	mul	r27, r18
 1b2:	70 0d       	add	r23, r0
 1b4:	81 1d       	adc	r24, r1
 1b6:	11 24       	eor	r1, r1
 1b8:	91 1d       	adc	r25, r1
 1ba:	08 95       	ret

000001bc <__udivmodsi4>:
 1bc:	a1 e2       	ldi	r26, 0x21	; 33
 1be:	1a 2e       	mov	r1, r26
 1c0:	aa 1b       	sub	r26, r26
 1c2:	bb 1b       	sub	r27, r27
 1c4:	fd 01       	movw	r30, r26
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <__udivmodsi4_ep>

000001c8 <__udivmodsi4_loop>:
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	ee 1f       	adc	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	e4 07       	cpc	r30, r20
 1d6:	f5 07       	cpc	r31, r21
 1d8:	20 f0       	brcs	.+8      	; 0x1e2 <__udivmodsi4_ep>
 1da:	a2 1b       	sub	r26, r18
 1dc:	b3 0b       	sbc	r27, r19
 1de:	e4 0b       	sbc	r30, r20
 1e0:	f5 0b       	sbc	r31, r21

000001e2 <__udivmodsi4_ep>:
 1e2:	66 1f       	adc	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	88 1f       	adc	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	1a 94       	dec	r1
 1ec:	69 f7       	brne	.-38     	; 0x1c8 <__udivmodsi4_loop>
 1ee:	60 95       	com	r22
 1f0:	70 95       	com	r23
 1f2:	80 95       	com	r24
 1f4:	90 95       	com	r25
 1f6:	9b 01       	movw	r18, r22
 1f8:	ac 01       	movw	r20, r24
 1fa:	bd 01       	movw	r22, r26
 1fc:	cf 01       	movw	r24, r30
 1fe:	08 95       	ret

00000200 <getchar>:
 200:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__iob>
 204:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <__iob+0x1>
 208:	00 c0       	rjmp	.+0      	; 0x20a <fgetc>

0000020a <fgetc>:
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	ec 01       	movw	r28, r24
 210:	2b 81       	ldd	r18, Y+3	; 0x03
 212:	20 ff       	sbrs	r18, 0
 214:	33 c0       	rjmp	.+102    	; 0x27c <fgetc+0x72>
 216:	26 ff       	sbrs	r18, 6
 218:	0a c0       	rjmp	.+20     	; 0x22e <fgetc+0x24>
 21a:	2f 7b       	andi	r18, 0xBF	; 191
 21c:	2b 83       	std	Y+3, r18	; 0x03
 21e:	8e 81       	ldd	r24, Y+6	; 0x06
 220:	9f 81       	ldd	r25, Y+7	; 0x07
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	9f 83       	std	Y+7, r25	; 0x07
 226:	8e 83       	std	Y+6, r24	; 0x06
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	29 c0       	rjmp	.+82     	; 0x280 <fgetc+0x76>
 22e:	22 ff       	sbrs	r18, 2
 230:	0f c0       	rjmp	.+30     	; 0x250 <fgetc+0x46>
 232:	e8 81       	ld	r30, Y
 234:	f9 81       	ldd	r31, Y+1	; 0x01
 236:	80 81       	ld	r24, Z
 238:	08 2e       	mov	r0, r24
 23a:	00 0c       	add	r0, r0
 23c:	99 0b       	sbc	r25, r25
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	19 f4       	brne	.+6      	; 0x248 <fgetc+0x3e>
 242:	20 62       	ori	r18, 0x20	; 32
 244:	2b 83       	std	Y+3, r18	; 0x03
 246:	1a c0       	rjmp	.+52     	; 0x27c <fgetc+0x72>
 248:	31 96       	adiw	r30, 0x01	; 1
 24a:	f9 83       	std	Y+1, r31	; 0x01
 24c:	e8 83       	st	Y, r30
 24e:	0e c0       	rjmp	.+28     	; 0x26c <fgetc+0x62>
 250:	ea 85       	ldd	r30, Y+10	; 0x0a
 252:	fb 85       	ldd	r31, Y+11	; 0x0b
 254:	09 95       	icall
 256:	97 ff       	sbrs	r25, 7
 258:	09 c0       	rjmp	.+18     	; 0x26c <fgetc+0x62>
 25a:	2b 81       	ldd	r18, Y+3	; 0x03
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	11 f0       	breq	.+4      	; 0x264 <fgetc+0x5a>
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	01 c0       	rjmp	.+2      	; 0x266 <fgetc+0x5c>
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	82 2b       	or	r24, r18
 268:	8b 83       	std	Y+3, r24	; 0x03
 26a:	08 c0       	rjmp	.+16     	; 0x27c <fgetc+0x72>
 26c:	2e 81       	ldd	r18, Y+6	; 0x06
 26e:	3f 81       	ldd	r19, Y+7	; 0x07
 270:	2f 5f       	subi	r18, 0xFF	; 255
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	3f 83       	std	Y+7, r19	; 0x07
 276:	2e 83       	std	Y+6, r18	; 0x06
 278:	99 27       	eor	r25, r25
 27a:	02 c0       	rjmp	.+4      	; 0x280 <fgetc+0x76>
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	9f ef       	ldi	r25, 0xFF	; 255
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
