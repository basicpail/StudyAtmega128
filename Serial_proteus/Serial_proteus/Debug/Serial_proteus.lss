
Serial_proteus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f4  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083c  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0c d0       	rcall	.+24     	; 0xb2 <main>
  9a:	20 c0       	rjmp	.+64     	; 0xdc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <putch>:
#include <avr/io.h>
#include <util/delay.h>

void putch(unsigned char data)
{
	while((UCSR0A & 0x20) == 0);
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <putch>
	
	UDR0 = data;
  a2:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= 0x20;
  a4:	5d 9a       	sbi	0x0b, 5	; 11
  a6:	08 95       	ret

000000a8 <getch>:
}

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80)==0);
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <getch>
	data = UDR0;
  ac:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  ae:	5f 9a       	sbi	0x0b, 7	; 11
	return data;
}
  b0:	08 95       	ret

000000b2 <main>:

int main(void)
{
	DDRE = 0xfe;
  b2:	8e ef       	ldi	r24, 0xFE	; 254
  b4:	82 b9       	out	0x02, r24	; 2
	
	UCSR0A = 0x00;
  b6:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	UBRR0H = 0x00;
  c2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	89 b9       	out	0x09, r24	; 9
    while (1) 
    {
		putch(getch());
  ca:	ee df       	rcall	.-36     	; 0xa8 <getch>
  cc:	e8 df       	rcall	.-48     	; 0x9e <putch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	97 e4       	ldi	r25, 0x47	; 71
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x20>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x26>
  d8:	00 00       	nop
  da:	f7 cf       	rjmp	.-18     	; 0xca <main+0x18>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
