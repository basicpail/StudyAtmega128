
lcd_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e13  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000924  00000000  00000000  00001133  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000459  00000000  00000000  00001a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000477  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f0  00000000  00000000  000023fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000028eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	6a d0       	rcall	.+212    	; 0x188 <main>
  b4:	81 c0       	rjmp	.+258    	; 0x1b8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LcdCmd_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	d8 98       	cbi	0x1b, 0	; 27
  ba:	d9 98       	cbi	0x1b, 1	; 27
  bc:	98 2f       	mov	r25, r24
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	94 60       	ori	r25, 0x04	; 4
  c2:	9b bb       	out	0x1b, r25	; 27
  c4:	2b e7       	ldi	r18, 0x7B	; 123
  c6:	2a 95       	dec	r18
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LcdCmd_4bit+0xe>
  ca:	da 98       	cbi	0x1b, 2	; 27
  cc:	d8 98       	cbi	0x1b, 0	; 27
  ce:	d9 98       	cbi	0x1b, 1	; 27
  d0:	20 e1       	ldi	r18, 0x10	; 16
  d2:	82 9f       	mul	r24, r18
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	8b e7       	ldi	r24, 0x7B	; 123
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <LcdCmd_4bit+0x26>
  e2:	da 98       	cbi	0x1b, 2	; 27
  e4:	08 95       	ret

000000e6 <LcdData_4bit>:
  e6:	d9 98       	cbi	0x1b, 1	; 27
  e8:	98 2f       	mov	r25, r24
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	95 60       	ori	r25, 0x05	; 5
  ee:	9b bb       	out	0x1b, r25	; 27
  f0:	2b e7       	ldi	r18, 0x7B	; 123
  f2:	2a 95       	dec	r18
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LcdData_4bit+0xc>
  f6:	da 98       	cbi	0x1b, 2	; 27
  f8:	d9 98       	cbi	0x1b, 1	; 27
  fa:	20 e1       	ldi	r18, 0x10	; 16
  fc:	82 9f       	mul	r24, r18
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	85 60       	ori	r24, 0x05	; 5
 104:	8b bb       	out	0x1b, r24	; 27
 106:	8b e7       	ldi	r24, 0x7B	; 123
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <LcdData_4bit+0x22>
 10c:	da 98       	cbi	0x1b, 2	; 27
 10e:	08 95       	ret

00000110 <Lcd_CHAR>:
 110:	ea df       	rcall	.-44     	; 0xe6 <LcdData_4bit>
 112:	83 e3       	ldi	r24, 0x33	; 51
 114:	97 e0       	ldi	r25, 0x07	; 7
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <Lcd_CHAR+0x6>
 11a:	08 95       	ret

0000011c <Lcd_STR>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
 122:	88 81       	ld	r24, Y
 124:	88 23       	and	r24, r24
 126:	29 f0       	breq	.+10     	; 0x132 <Lcd_STR+0x16>
 128:	21 96       	adiw	r28, 0x01	; 1
 12a:	f2 df       	rcall	.-28     	; 0x110 <Lcd_CHAR>
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fc cf       	rjmp	.-8      	; 0x12a <Lcd_STR+0xe>
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <Lcd_Pos>:
 138:	90 e4       	ldi	r25, 0x40	; 64
 13a:	89 9f       	mul	r24, r25
 13c:	60 0d       	add	r22, r0
 13e:	11 24       	eor	r1, r1
 140:	86 2f       	mov	r24, r22
 142:	80 68       	ori	r24, 0x80	; 128
 144:	b9 cf       	rjmp	.-142    	; 0xb8 <LcdCmd_4bit>
 146:	08 95       	ret

00000148 <Lcd_Clear>:
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	b6 df       	rcall	.-148    	; 0xb8 <LcdCmd_4bit>
 14c:	86 e6       	ldi	r24, 0x66	; 102
 14e:	9e e0       	ldi	r25, 0x0E	; 14
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <Lcd_Clear+0x8>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <LcdInit_4bit>:
	}
}

void LcdInit_4bit(void)
{
	LcdCmd_4bit(0x02);	//cursor Home
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	ae df       	rcall	.-164    	; 0xb8 <LcdCmd_4bit>
 15c:	86 e6       	ldi	r24, 0x66	; 102
 15e:	9e e0       	ldi	r25, 0x0E	; 14
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LcdInit_4bit+0x8>
 164:	00 00       	nop
	_delay_ms(2);		//명령어를 IR에 쓰고나면 37us 또는 1.52ms을 기다림.
	LcdCmd_4bit(0x28);	//기능 재설정
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	a7 df       	rcall	.-178    	; 0xb8 <LcdCmd_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	9b e5       	ldi	r25, 0x5B	; 91
 16c:	9a 95       	dec	r25
	_delay_us(37);
	LcdCmd_4bit(0x0c);	//LCD ON, 커서 깜박임 없음
 16e:	f1 f7       	brne	.-4      	; 0x16c <LcdInit_4bit+0x14>
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	a2 df       	rcall	.-188    	; 0xb8 <LcdCmd_4bit>
 174:	8b e5       	ldi	r24, 0x5B	; 91
 176:	8a 95       	dec	r24
	_delay_us(37);
	LcdCmd_4bit(0x06);	//엔트리:우로 이동
 178:	f1 f7       	brne	.-4      	; 0x176 <LcdInit_4bit+0x1e>
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	9d df       	rcall	.-198    	; 0xb8 <LcdCmd_4bit>
 17e:	9b e5       	ldi	r25, 0x5B	; 91
 180:	9a 95       	dec	r25
	_delay_us(37);
	Lcd_Clear();
 182:	f1 f7       	brne	.-4      	; 0x180 <LcdInit_4bit+0x28>
 184:	e1 cf       	rjmp	.-62     	; 0x148 <Lcd_Clear>
 186:	08 95       	ret

00000188 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "Lcd.h"

int main()
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <main+0x6>
 18e:	00 d0       	rcall	.+0      	; 0x190 <main+0x8>
 190:	00 d0       	rcall	.+0      	; 0x192 <main+0xa>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	//DDRA =0x00;
	//PORTA = 0xFF;
	
	Byte str[] = "hello";
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	e0 e0       	ldi	r30, 0x00	; 0
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	de 01       	movw	r26, r28
 19e:	11 96       	adiw	r26, 0x01	; 1
 1a0:	01 90       	ld	r0, Z+
 1a2:	0d 92       	st	X+, r0
 1a4:	8a 95       	dec	r24
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x18>
	LcdInit_4bit();
 1a8:	d7 df       	rcall	.-82     	; 0x158 <LcdInit_4bit>
			Lcd_Pos(0,0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	c4 df       	rcall	.-120    	; 0x138 <Lcd_Pos>
			Lcd_STR(str);
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	b3 df       	rcall	.-154    	; 0x11c <Lcd_STR>
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <main+0x2e>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
